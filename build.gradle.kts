/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
configurations.all {
    isTransitive = false
}
val otelVersion = "1.38.0"
val otelSemconvVersion = "1.21.0-alpha"
dependencies {
    // Use JUnit test framework.
    testImplementation(libs.junit)

    // This dependency is used by the application.
    implementation(libs.guava)
    // OpenTelemetry API and SDK
    implementation ("io.opentelemetry:opentelemetry-api:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-sdk-common:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-sdk-trace:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-sdk-metrics:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-sdk-logs:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-sdk:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-context:${otelVersion}")
    implementation ("io.opentelemetry:opentelemetry-semconv:${otelSemconvVersion}")

    // OTLP Exporter (for sending traces to OTel Collector)
    implementation("io.opentelemetry:opentelemetry-exporter-common:${otelVersion}")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp-common:${otelVersion}")
    implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:${otelVersion}")
//  implementation("io.opentelemetry:opentelemetry-exporter-otlp:${otelVersion}")

    implementation("io.opentelemetry:opentelemetry-exporter-otlp:${otelVersion}") {
        exclude ("io.opentelemetry:opentelemetry-exporter-sender-okhttp")
    }
    implementation("io.opentelemetry:opentelemetry-exporter-sender-grpc-managed-channel:${otelVersion}")
    implementation("io.grpc:grpc-stub:1.63.0")
    implementation("io.grpc:grpc-api:1.63.0")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
//    implementation("com.google.guava:guava:32.1.3-android")


//  implementation("io.opentelemetry:opentelemetry-exporter-sender-jdk:${otelVersion}")
    runtimeOnly("io.opentelemetry:opentelemetry-api-incubator:1.38.0-alpha")

    implementation("io.grpc:grpc-netty:1.60.2")
    implementation("io.grpc:grpc-core:1.60.2")

    implementation("io.netty:netty-codec-http2:4.1.100.Final")
    implementation("io.netty:netty-common:4.1.100.Final")
    implementation("io.netty:netty-buffer:4.1.100.Final")
    implementation("io.netty:netty-transport:4.1.100.Final")
    implementation("io.netty:netty-codec:4.1.100.Final")
    implementation("io.netty:netty-handler:4.1.100.Final")
    implementation("io.netty:netty-codec-http:4.1.100.Final")
    implementation("io.netty:netty-resolver:4.1.100.Final")

//    implementation("io.grpc:grpc-core:1.64.0")
    runtimeOnly("io.perfmark:perfmark-api:0.26.0")
    runtimeOnly("io.netty:netty-handler-proxy:4.1.100.Final")
    runtimeOnly("io.netty:netty-transport-native-unix-common:4.1.100.Final")
    runtimeOnly("io.netty:netty-transport-native-unix-common:4.1.100.Final")
    runtimeOnly("com.google.errorprone:error_prone_annotations:2.20.0")
    implementation("com.google.guava:guava:32.0.1-android")
    implementation("com.google.guava:failureaccess:1.0.2")

    //WARNING: Cannot create high-performance queue, reverting to ArrayBlockingQueue (java.lang.NoClassDefFoundError: sun/misc/Unsafe)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}
